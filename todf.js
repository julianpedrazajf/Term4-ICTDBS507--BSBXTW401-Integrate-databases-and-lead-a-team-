/*jshint esversion: 6*/
/*****************************************************************************
 * Function: ajaxGenerateClassList(parCourseNo)                              *
 * Function Description:                                                     *
 * This function generates a class list based from the course selected.      *
 *---------------------------------------------------------------------------*
 * Parameter Description:                                                    *
 * 1. parCourseNo. Course identifier.                                        *
 *****************************************************************************/
function ajaxGenerateClassList(parCourseNo){
  const xmlHttp = new XMLHttpRequest();
  xmlHttp.onreadystatechange = function(){
    if(this.readyState==4 && this.status==200){
      const classListArray = JSON.parse(this.responseText);
      const thisClassList = document.querySelector(".classList");
      let classOption;
      thisClassList.setAttribute("class", "classList form-select d-block");
      classListArray.forEach(function(item, index){
        classOption = createElementWithTextNode("option", item["classDetail"]);
        classOption.setAttribute("value", item["classNo"]);
        thisClassList.appendChild(classOption);
      });//classListArray.forEach(function(item, index)
    }//if(this.readyState==4 && this.status==200)
  }//xmlHttp.onreadystatechange = function(){}
  xmlHttp.open('POST', 'Processes/processClassList.php?courseNo='+parCourseNo, true);
  xmlHttp.send();
}//function ajaxGetClass()

/*****************************************************************************
 * Function: ajaxGetDataFromServer(parProcessingServerFile, callbackFunction)*
 * Function Description:                                                     *
 * This function returns data from the server. Data will be generated by     *
 *    the instructions specified in the file parProcessingServerFile. Data   *
 *    will then be sent to the callbackFunction for further processing.      *
 *---------------------------------------------------------------------------*
 * Parameter Description:                                                    *
 * 1. parProcessingServerFile. contains the file name that has the           *
 *    instructions to fetch data from the database.                          *
 * 2. callbackFunction. Data from the database will be returned to this      *
 *    callback function for further processing.                              *
 *****************************************************************************/
function ajaxGetDataFromServer(parProcessingServerFile, callbackFunction){
  const xmlHttp = new XMLHttpRequest();
  xmlHttp.onreadystatechange = function(){
    if(this.readyState==4 && this.status==200){
      callbackFunction(JSON.parse(this.responseText));
    }//if(this.readyState==4 && this.status==200)
  }//xmlHttp.onreadystatechange = function(){}
  xmlHttp.open('POST', parProcessingServerFile, true);
  xmlHttp.send();
}//function ajaxGetDataFromServer(parProcessingServerFile, callbackFunction)

/*****************************************************************************
 * Function: createUserAvatar(parImageFileName)                              *
 * Function Description:                                                     *
 * This function creates user avatar.                                        *
 *---------------------------------------------------------------------------*
 * Parameter Description:                                                    *
 * 1. parImageFileName. image for the avatar.                                *
 *****************************************************************************/
function createUserAvatar(parImageFileName)
{
  let attributeList = {class:"avatar", alt:"Avatar", src:"images/userAvatar/"+parImageFileName};
  const thisAvatar = createElementWithAttributes("img", attributeList);

  return thisAvatar;
}//function createUserAvatar(parImageFileName)

/*****************************************************************************
 * Function: createForumDropdown(parCategoryName, parArraySubCategories)     *
 * Function Description:                                                     *
 * This function creates dropdown for the forum menu that contains categories*
 *    as menu items and subcategories as submenus. This funtion also creates *
 *    menu items without subcategories.                                      *
 *---------------------------------------------------------------------------*
 * Parameter Description:                                                    *
 * 1. parCategoryName. the category that will be the menu item               *
 * 2. parArraySubCategories. array that contains subcategories of the menu   *
 *       item.                                                               *
 *****************************************************************************/
function createForumDropdown(parCategoryName, parArraySubCategories)
{
  let thisCategory = "";

  thisCategory = hasSubcategory(parArraySubCategories)
               ?createMenuItemWithSubmenu(parCategoryName, parArraySubCategories)
               :createMenuItemOther(parCategoryName);

  return thisCategory;
}//createCategoryDropdownWithSubcategory()

/*****************************************************************************
 * Function: createMenuItemWithSubmenu(parCategoryName,                      *
 *                                     parArraySubCategories)                *
 * Function Description:                                                     *
 * This function creates dropdown for the forum menu that contains categories*
 *    as menu items and subcategories as submenus.                           *
 *---------------------------------------------------------------------------*
 * Parameter Description:                                                    *
 * 1. parCategoryName. the category that will be the menu item               *
 * 2. parArraySubCategories. array that contains subcategories of the menu   *
 *       item.                                                               *
 *****************************************************************************/
function createMenuItemWithSubmenu(parCategoryName, parArraySubCategories)
{
  let attributeList = {class: "withSubcategory dropdown"};
  const thisMenuItem = createElementWithAttributes("li", attributeList);
  
  attributeList = {class: "dropdown-item dropdown-toggle", href:"#", "data-bs-toggle":"dropdown"};
  const thisMenuItemDropDownToggle = createElementWithAttributesAndTextNode("a", attributeList, parCategoryName);

  attributeList = {class: "dropdown-menu submenu"};
  const thisSubmenu = createElementWithAttributes("ul", attributeList);

  parArraySubCategories.forEach(function(item){
    for (subcategoryID in item)
    {
      thisSubmenu.appendChild(createSubmenuItem(subcategoryID
                        , item[subcategoryID]));   //subcategoryName
    }
  });

  thisMenuItem.appendChild(thisMenuItemDropDownToggle);
  thisMenuItem.appendChild(thisSubmenu);
  return thisMenuItem;
}//function createCategoryWithSubcategory()

/*****************************************************************************
 * Function: createMenuItem(createMenuItem(parMenuItemName                   *
 *                     , parClass, parHref))                                 *
 * Function Description:                                                     *
 * This function creates dropdown for the forum menu that contains categories*
 *    as menu items. This does not create any submenu.                       *
 *---------------------------------------------------------------------------*
 * Parameter Description:                                                    *
 * 1. parMenuItemName. the category that will be the menu item               *
 * 2. parClass. the bootstrap class of the 'a' tag.                          *
 * 3. parHref. the href of the 'a' tag.                                      *
 *****************************************************************************/
 function createMenuItem(parMenuItemName, parClass, parHref)
 {
   const thisMenuItem = document.createElement("li");
   const attributeList = {class: parClass, href:parHref};
   const thisDropdownItem = createElementWithAttributesAndTextNode("a", attributeList, parMenuItemName);
 
   thisMenuItem.appendChild(thisDropdownItem);
   return thisMenuItem;
 }//function createMenuItem(parCategoryName)

/*****************************************************************************
 * Function: createMenuItem(parCategoryName)                                 *
 * Function Description:                                                     *
 * This function creates dropdown for the forum menu that contains categories*
 *    as menu items. This does not create any submenu.                       *
 *---------------------------------------------------------------------------*
 * Parameter Description:                                                    *
 * 1. parCategoryName. the category that will be the menu item               *
 *****************************************************************************/
function createMenuItemOther(parCategoryName)
{
  const thisMenuItem = document.createElement("li");
  const attributeList = {class: "dropdown-item other", href:"questionsList.php?CategoryName="+parCategoryName};
  const thisDropdownItem = createElementWithAttributesAndTextNode("a", attributeList, parCategoryName);

  thisMenuItem.appendChild(thisDropdownItem);
  return thisMenuItem;
}//function createMenuItem(parCategoryName)

/*****************************************************************************
 * Function: createSubmenuItem(parSubCategoryID,                             *
 *                                     parSubcategoryName)                   *
 * Function Description:                                                     *
 * This function creates submenu item having the following format:           *
 *  <li><a class="dropdown-item" href="questionsList.php?SubcategoryID=1">   *
 *     Subcategory 21</a>                                                    *
 *  </li>                                                                    * 
 *---------------------------------------------------------------------------*
 * Parameter Description:                                                    *
 * 1. parSubCategoryID. the category ID to be attached to the query string   *
 * 2. parSubcategoryName. this will be the category name as text node        *
 *       item.                                                               *
 *****************************************************************************/
function createSubmenuItem(parSubCategoryID, parSubcategoryName)
{
  const thisSubmenuItem = document.createElement("li");
  let attributeList = {class: "dropdown-item", href:"questionsList.php?SubcategoryID="+parSubCategoryID};
  const thisDropdownItem = createElementWithAttributesAndTextNode("a", attributeList, parSubcategoryName);

  thisSubmenuItem.appendChild(thisDropdownItem);
  return thisSubmenuItem;
}//function createSubmenuItem()

/*****************************************************************************
 * Function: hasSubcategory(parArray)                                        *
 * Function Description:                                                     *
 * This function checks for subcategories in the parArray                    * 
 *---------------------------------------------------------------------------*
 * Parameter Description:                                                    *
 * 1. parArray. array that may contain subcategories.                        *
 *****************************************************************************/
function hasSubcategory(parArray)
{
  let hasSubcategory = false;
  for(key in parArray[0])
    hasSubcategory = parArray[0][key]===null?false:true;

  return hasSubcategory;
}//hasSubcategory(parArray)

/*****************************************************************************
 * Function: createElementWithAttributes(parElement, parAttributeList)       *
 * Function Description:                                                     *
 * This function creates an element with any number of attributes            *
 *---------------------------------------------------------------------------*
 * Parameter Description:                                                    *
 * 1. parElement. Element in string format. e.g. "div"                       *
 * 2. parAttributeList. Attribute(s) in json format without stringifying     *
 *    example: {"src": "myImage.jpg", class:"w-100", alt:"Image not loaded"} *
 *****************************************************************************/
 function createElementWithAttributes(parElement, parAttributeList)
 {
   const thisElement = document.createElement(parElement);
 
   for(attribute in parAttributeList){
     thisAttribute = document.createAttribute(attribute);
     thisAttribute.value = parAttributeList[attribute];
     thisElement.setAttributeNode(thisAttribute);
   }//for(attribute in parAttributeList)
   return thisElement;
 }//function createElementWithAttributes(parElement, parAttributeList)

 /*****************************************************************************
 * Function: createElementWithAttributesAndTextNode(parElement               *
 *                                                 , parAttributeList        *
 *                                                 , parTextNode)            *
 * Function Description:                                                     *
 * This function creates an element with any number of attributes            *
 *---------------------------------------------------------------------------*
 * Parameter Description:                                                    *
 * 1. parElement. Element in string format. e.g. "div"                       *
 * 2. parAttributeList. Attribute(s) in json format without stringifying     *
 *    example: {"src": "myImage.jpg", class:"w-100", alt:"Image not loaded"} *
 * 3. parTextNode. Text node in string format. e.g. "Hello"                  *
 *****************************************************************************/
function createElementWithAttributesAndTextNode(parElement, parAttributeList, parTextNode)
{
  const thisElement = createElementWithAttributes(parElement, parAttributeList);
  const thisTextNode = document.createTextNode(parTextNode);
  thisElement.appendChild(thisTextNode);
  return thisElement;
}//function createElementWithAttributes(parElement, parAttributeLis...


/*****************************************************************************
 * Function: createElementWithTextNode(parElement, parTextNode)              *
 * Function Description:                                                     *
 * This function creates an element with text node. example: <h1>Hello</h1>  *
 *---------------------------------------------------------------------------*
 * Parameter Description:                                                    *
 * 1. parElement. Element in string format. e.g. "div"                       *
 * 2. parTextNode. Text node in string format. e.g. "Hello"                  *
 *****************************************************************************/
function createElementWithTextNode(parElement, parTextNode) {
    const thisNewElement = document.createElement(parElement);
    const thisTitleTextNode = document.createTextNode(parTextNode);
    thisNewElement.appendChild(thisTitleTextNode);
    return thisNewElement;
}//function createElementWithTextNode(parElement, parTextNode)

/*****************************************************************************
 * Function: createLoggedInUserDropdown(parUserImage, parUserID)             *
 * Function Description:                                                     *
 * This function creates user drop down menu item.                           *
 *---------------------------------------------------------------------------*
 * Parameter Description:                                                    *
 * 1. parUserImage. User image for the avatar.                               *
 * 2. parUserID. user id for editing profile or changing password            *
 *****************************************************************************/
function createLoggedInUserDropdown(parUserImage, parUserID)
{  
  let attributeList = {class:"dropdown my-3 my-md-0 ms-md-5", id:"loggedInUserDropdown"};
  const thisDropdown = createElementWithAttributes("div", attributeList);

  attributeList = {class:"dropdown-toggle", href:"#", role:"button", "data-bs-toggle":"dropdown", "aria-expanded":"false"};
  const thisDropdownToggle = createElementWithAttributes("a", attributeList);

  thisDropdownToggle.appendChild(createUserAvatar(parUserImage));

  attributeList = {class:"dropdown-menu dropdown-menu-start dropdown-menu-md-end"};
  const thisDropdownMenu = createElementWithAttributes("ul", attributeList);
  
  thisDropdownMenu.appendChild(createMenuItem("Edit profile", "dropdown-item", "editProfile.php?UserID="+parUserID));
  thisDropdownMenu.appendChild(createMenuItem("Change password", "dropdown-item", "changePassword.php?UserID="+parUserID));
  thisDropdownMenu.appendChild(createMenuItem("Log out", "dropdown-item", "Processes/processLogout.php"));

  thisDropdown.appendChild(thisDropdownToggle);
  thisDropdown.appendChild(thisDropdownMenu);

  return thisDropdown;
}//function createLoggedInUserDropdown()

/*****************************************************************************
 * Function: displayAlertMessage(parMessage)                                 *
 * Function Description:                                                     *
 * This function displays a dismissable alert message.                       *
 *---------------------------------------------------------------------------*
 * Parameter Description:                                                    *
 * 1. parMessage. message to be displayed.                                   *
 *****************************************************************************/
function displayAlertMessage(parMessage)
{
  let attributeList = {class: "alert alert-warning alert-dismissable fade show col-6 col-md-6 mx-auto d-flex justify-content-between", role:"alert"};
  const thisAlert = createElementWithAttributes("div", attributeList);

  const thisMessage = document.createTextNode(parMessage);

  attributeList = {class: "btn-close", type:"button", "data-bs-dismiss":"alert", "aria-label":"Close"};
  const thisButton = createElementWithAttributes("button", attributeList);

  thisAlert.appendChild(thisMessage);
  thisAlert.appendChild(thisButton);

  return thisAlert;
}//function displayAlertMessage(parMessage)

/*****************************************************************************
 * Function: enableSubmenu(parDropdownTogglers, parAllSubmenus)              *
 * Function Description:                                                     *
 * This function enables submenu behaviours as submenus are not supported in *
 * this version of Bootstrap. Submenu beheviours are:                        *
 *    1. Submenu appears when a category is clicked.                         *
 *    2. Submenu disappers when any part of the body is clicked except for   *
 *       the subcategories.                                                  *
 *---------------------------------------------------------------------------*
 * Parameter Description:                                                    *
 * 1. parElement. Element in string format. e.g. "div"                       *
 * 2. parTextNode. Text node in string format. e.g. "Hello"                  *
 *****************************************************************************/
function enableSubmenu(parDropdownTogglers, parAllSubmenus)
{
  parDropdownTogglers.forEach(function(dropdownTogglerItem){
    dropdownTogglerItem.addEventListener('click', function () {
      const thisSubMenu = this.nextElementSibling;
      if(thisSubMenu.style.display==='block')
      {
        //hide all submenus of subcategories
        hideElement(parAllSubmenus);

        //Make forum's dropdown menu disappear when forum menu item is clicked.
        thisSubMenu.style.display = 'none';
      }
      else
      {
        /*The two lines of code below gives an illusion that
          hides all submenus except for the submenus of the 
          current category selected.
        */            
        //hide all submenus of subcategories
        hideElement(parAllSubmenus);
        thisSubMenu.style.display = 'block';
      }
    });
  });//dropdownTogglers.forEach(function(dropdownTogglersItem){
  
  /* hide all submenus of subcategories when clicked any part
    of the body except for category menu items */
    document.body.addEventListener('click', function(event){
    if(!(event.target.classList.contains("dropdown-toggle")))
    {
      //hide all submenus of subcategories
      hideElement(parAllSubmenus);
    }  
  });
}//function enableSubmenu(parDropdownTogglers, allSubmenus)

/*****************************************************************************
 * Function: getCurrentYear()                                                *
 * Function Description:                                                     *
 *  This function gets the current year.                                     *
 *****************************************************************************/
 function getCurrentYear(){return new Date().getFullYear();}

 /****************************************************************************
 * Function: hideElements(parElements)                                       *
 * Function Description:                                                     *
 *  This function hide all elements in the parameter.                        *
 * *-------------------------------------------------------------------------*
 * Parameter Description:                                                    *
 * 1. parElements. all elements coming form querySelectorAll                 *
 *****************************************************************************/
 function hideElement(parElement)
 {
  parElement.forEach(function(thisElement){
    thisElement.style.display='none';  
   });
 }// function hideElements(parElements)

 /*****************************************************************************
 * Function: removeClassList()                                               *
 * Function Description:                                                     *
 * This function removes the classes from the option list                    *
 *****************************************************************************/
function removeClassList(){
  const thisClassList = document.querySelector(".classList");
  const classOptionArray = thisClassList.querySelectorAll("option");

  classOptionArray.forEach(function(item, index){
    if(index > 0){
      item.remove();
    }
  });//classOptionArray.foreach
}//function ajaxRemoveClassList()

 /*******************************************************************************
 * Function: selectBetweenDropDownAndDropEnd(parScreenWidthMobilePhonePortrait) *                                       *
 * Function Description:                                                        *
 *  This function uses dropdown or dropend in the category menu items depending *
 *  on the screen width                                                         *
 * *----------------------------------------------------------------------------*
 * Parameter Description:                                                       *
 * 1. parScreenWidthMobilePhonePortrait. contains media query string about      *
 *    the screen width. For example: (max-width: 768px)                         *
 ********************************************************************************/
function selectBetweenDropDownAndDropEnd(parScreenWidthMobilePhonePortrait){
  if(parScreenWidthMobilePhonePortrait.matches){
    
    //document.querySelectorAll(".withSubcategory") must be hardcoded because this function
    //is called at runtime.
    document.querySelectorAll(".withSubcategory").forEach(function(categoryElementWithDropDown){
      categoryElementWithDropDown.classList.remove("dropend");
      categoryElementWithDropDown.classList.add("dropdown");
    });
  }
  else
  {
    document.querySelectorAll(".withSubcategory").forEach(function(categoryElementWithDropDown){
      categoryElementWithDropDown.classList.remove("dropdown");
      categoryElementWithDropDown.classList.add("dropend");
    });
  }
}//function selectBetweenDropDownAndDropEnd(parScreenWidthMobilePhonePortrait)

/*****************************************************************************
 * Function: validatePassword()                                              *
 * Function Description:                                                     *
 * This function validates if password and confirm password entered matches. *
 *****************************************************************************/
 function validatePassword(){
  let  regPassword = document.querySelector(".regPassword").value
      ,regConfirmPassword = document.querySelector(".regConfirmPassword").value;

  if(regPassword===regConfirmPassword){
    return true;
  }
  else
  {
    alert("Passwords does not match. Please try again.");
    return false;
  }
}//function validatePassword()